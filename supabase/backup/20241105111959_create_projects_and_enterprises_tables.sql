revoke delete on table "public"."usernames" from "anon";

revoke insert on table "public"."usernames" from "anon";

revoke references on table "public"."usernames" from "anon";

revoke select on table "public"."usernames" from "anon";

revoke trigger on table "public"."usernames" from "anon";

revoke truncate on table "public"."usernames" from "anon";

revoke update on table "public"."usernames" from "anon";

revoke delete on table "public"."usernames" from "authenticated";

revoke insert on table "public"."usernames" from "authenticated";

revoke references on table "public"."usernames" from "authenticated";

revoke select on table "public"."usernames" from "authenticated";

revoke trigger on table "public"."usernames" from "authenticated";

revoke truncate on table "public"."usernames" from "authenticated";

revoke update on table "public"."usernames" from "authenticated";

revoke delete on table "public"."usernames" from "service_role";

revoke insert on table "public"."usernames" from "service_role";

revoke references on table "public"."usernames" from "service_role";

revoke select on table "public"."usernames" from "service_role";

revoke trigger on table "public"."usernames" from "service_role";

revoke truncate on table "public"."usernames" from "service_role";

revoke update on table "public"."usernames" from "service_role";

alter table "public"."usernames" drop constraint "usernames_email_key";

alter table "public"."usernames" drop constraint "usernames_username_key";

drop function if exists "public"."liff_uid"();

alter table "public"."usernames" drop constraint "usernames_pkey";

drop index if exists "public"."usernames_email_key";

drop index if exists "public"."usernames_pkey";

drop index if exists "public"."usernames_username_key";

drop table "public"."usernames";

create table "public"."enterprise_settings_history" (
    "id" bigint generated by default as identity not null,
    "enterprise_id" uuid not null,
    "created_by_user_id" uuid not null default auth.uid(),
    "settings" jsonb not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."enterprise_settings_history" enable row level security;

create table "public"."enterprises" (
    "id" uuid not null default gen_random_uuid(),
    "signup_url_name" text not null,
    "enterprise_token" text,
    "enterprise_name" text,
    "status" text not null default 'SIGNUP_URL_CREATED'::text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."enterprises" enable row level security;

create table "public"."project_members" (
    "id" bigint generated by default as identity not null,
    "project_id" uuid not null,
    "user_id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."project_members" enable row level security;

create table "public"."projects" (
    "id" uuid not null default gen_random_uuid(),
    "owner_id" uuid not null default auth.uid(),
    "project_name" text not null,
    "organization_name" text not null,
    "enterprise_id" uuid,
    "created_at" timestamp with time zone not null default now(),
    "updatee_at" timestamp with time zone not null default now()
);


alter table "public"."projects" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "email" text not null,
    "username" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."users" enable row level security;

alter table "public"."comments" drop column "createdAt";

alter table "public"."comments" add column "created_at" timestamp with time zone not null default now();

alter table "public"."comments" add column "updated_at" timestamp with time zone not null default now();

CREATE UNIQUE INDEX enterprise_settings_history_pkey ON public.enterprise_settings_history USING btree (id);

CREATE UNIQUE INDEX enterprises_pkey ON public.enterprises USING btree (id);

CREATE UNIQUE INDEX project_user_management_pkey ON public.project_members USING btree (id);

CREATE UNIQUE INDEX projects_id_key ON public.projects USING btree (id);

CREATE UNIQUE INDEX projects_pkey ON public.projects USING btree (id);

CREATE UNIQUE INDEX usernames_email_key ON public.users USING btree (email);

CREATE UNIQUE INDEX usernames_pkey ON public.users USING btree (id);

CREATE UNIQUE INDEX usernames_username_key ON public.users USING btree (username);

alter table "public"."enterprise_settings_history" add constraint "enterprise_settings_history_pkey" PRIMARY KEY using index "enterprise_settings_history_pkey";

alter table "public"."enterprises" add constraint "enterprises_pkey" PRIMARY KEY using index "enterprises_pkey";

alter table "public"."project_members" add constraint "project_user_management_pkey" PRIMARY KEY using index "project_user_management_pkey";

alter table "public"."projects" add constraint "projects_pkey" PRIMARY KEY using index "projects_pkey";

alter table "public"."users" add constraint "usernames_pkey" PRIMARY KEY using index "usernames_pkey";

alter table "public"."enterprise_settings_history" add constraint "enterprise_settings_history_created_by_user_id_fkey" FOREIGN KEY (created_by_user_id) REFERENCES auth.users(id) not valid;

alter table "public"."enterprise_settings_history" validate constraint "enterprise_settings_history_created_by_user_id_fkey";

alter table "public"."enterprise_settings_history" add constraint "enterprise_settings_history_enterprise_id_fkey" FOREIGN KEY (enterprise_id) REFERENCES enterprises(id) not valid;

alter table "public"."enterprise_settings_history" validate constraint "enterprise_settings_history_enterprise_id_fkey";

alter table "public"."project_members" add constraint "project_members_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE not valid;

alter table "public"."project_members" validate constraint "project_members_project_id_fkey";

alter table "public"."project_members" add constraint "project_user_management_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."project_members" validate constraint "project_user_management_user_id_fkey";

alter table "public"."projects" add constraint "projects_enterprise_id_fkey" FOREIGN KEY (enterprise_id) REFERENCES enterprises(id) not valid;

alter table "public"."projects" validate constraint "projects_enterprise_id_fkey";

alter table "public"."projects" add constraint "projects_id_key" UNIQUE using index "projects_id_key";

alter table "public"."projects" add constraint "projects_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES auth.users(id) not valid;

alter table "public"."projects" validate constraint "projects_owner_id_fkey";

alter table "public"."users" add constraint "usernames_email_key" UNIQUE using index "usernames_email_key";

alter table "public"."users" add constraint "usernames_username_key" UNIQUE using index "usernames_username_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.is_project_user(project_id uuid)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$BEGIN
  RETURN EXISTS (
    SELECT 1
    FROM project_members
    WHERE project_members.project_id = is_project_user.project_id
    AND project_members.user_id = auth.uid()
  );
END;$function$
;

grant delete on table "public"."enterprise_settings_history" to "anon";

grant insert on table "public"."enterprise_settings_history" to "anon";

grant references on table "public"."enterprise_settings_history" to "anon";

grant select on table "public"."enterprise_settings_history" to "anon";

grant trigger on table "public"."enterprise_settings_history" to "anon";

grant truncate on table "public"."enterprise_settings_history" to "anon";

grant update on table "public"."enterprise_settings_history" to "anon";

grant delete on table "public"."enterprise_settings_history" to "authenticated";

grant insert on table "public"."enterprise_settings_history" to "authenticated";

grant references on table "public"."enterprise_settings_history" to "authenticated";

grant select on table "public"."enterprise_settings_history" to "authenticated";

grant trigger on table "public"."enterprise_settings_history" to "authenticated";

grant truncate on table "public"."enterprise_settings_history" to "authenticated";

grant update on table "public"."enterprise_settings_history" to "authenticated";

grant delete on table "public"."enterprise_settings_history" to "service_role";

grant insert on table "public"."enterprise_settings_history" to "service_role";

grant references on table "public"."enterprise_settings_history" to "service_role";

grant select on table "public"."enterprise_settings_history" to "service_role";

grant trigger on table "public"."enterprise_settings_history" to "service_role";

grant truncate on table "public"."enterprise_settings_history" to "service_role";

grant update on table "public"."enterprise_settings_history" to "service_role";

grant delete on table "public"."enterprises" to "anon";

grant insert on table "public"."enterprises" to "anon";

grant references on table "public"."enterprises" to "anon";

grant select on table "public"."enterprises" to "anon";

grant trigger on table "public"."enterprises" to "anon";

grant truncate on table "public"."enterprises" to "anon";

grant update on table "public"."enterprises" to "anon";

grant delete on table "public"."enterprises" to "authenticated";

grant insert on table "public"."enterprises" to "authenticated";

grant references on table "public"."enterprises" to "authenticated";

grant select on table "public"."enterprises" to "authenticated";

grant trigger on table "public"."enterprises" to "authenticated";

grant truncate on table "public"."enterprises" to "authenticated";

grant update on table "public"."enterprises" to "authenticated";

grant delete on table "public"."enterprises" to "service_role";

grant insert on table "public"."enterprises" to "service_role";

grant references on table "public"."enterprises" to "service_role";

grant select on table "public"."enterprises" to "service_role";

grant trigger on table "public"."enterprises" to "service_role";

grant truncate on table "public"."enterprises" to "service_role";

grant update on table "public"."enterprises" to "service_role";

grant delete on table "public"."project_members" to "anon";

grant insert on table "public"."project_members" to "anon";

grant references on table "public"."project_members" to "anon";

grant select on table "public"."project_members" to "anon";

grant trigger on table "public"."project_members" to "anon";

grant truncate on table "public"."project_members" to "anon";

grant update on table "public"."project_members" to "anon";

grant delete on table "public"."project_members" to "authenticated";

grant insert on table "public"."project_members" to "authenticated";

grant references on table "public"."project_members" to "authenticated";

grant select on table "public"."project_members" to "authenticated";

grant trigger on table "public"."project_members" to "authenticated";

grant truncate on table "public"."project_members" to "authenticated";

grant update on table "public"."project_members" to "authenticated";

grant delete on table "public"."project_members" to "service_role";

grant insert on table "public"."project_members" to "service_role";

grant references on table "public"."project_members" to "service_role";

grant select on table "public"."project_members" to "service_role";

grant trigger on table "public"."project_members" to "service_role";

grant truncate on table "public"."project_members" to "service_role";

grant update on table "public"."project_members" to "service_role";

grant delete on table "public"."projects" to "anon";

grant insert on table "public"."projects" to "anon";

grant references on table "public"."projects" to "anon";

grant select on table "public"."projects" to "anon";

grant trigger on table "public"."projects" to "anon";

grant truncate on table "public"."projects" to "anon";

grant update on table "public"."projects" to "anon";

grant delete on table "public"."projects" to "authenticated";

grant insert on table "public"."projects" to "authenticated";

grant references on table "public"."projects" to "authenticated";

grant select on table "public"."projects" to "authenticated";

grant trigger on table "public"."projects" to "authenticated";

grant truncate on table "public"."projects" to "authenticated";

grant update on table "public"."projects" to "authenticated";

grant delete on table "public"."projects" to "service_role";

grant insert on table "public"."projects" to "service_role";

grant references on table "public"."projects" to "service_role";

grant select on table "public"."projects" to "service_role";

grant trigger on table "public"."projects" to "service_role";

grant truncate on table "public"."projects" to "service_role";

grant update on table "public"."projects" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."enterprise_settings_history"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable insert for authenticated users only"
on "public"."enterprises"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."enterprises"
as permissive
for select
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."project_members"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable delete for users based on user_id"
on "public"."projects"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = owner_id));


create policy "Enable insert for authenticated users only"
on "public"."projects"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."projects"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) = owner_id) OR is_project_user(id)));


create policy "Policy with table joins"
on "public"."projects"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = owner_id));




